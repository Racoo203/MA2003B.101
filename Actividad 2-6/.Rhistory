y = sampled_dataset[,"Category"]
X = select_if(sampled_dataset, is.numeric)
X = X[,which(names(X) != "price")]
sampled_dataset = data.frame(cbind(X, y))
names(sampled_dataset)[names(sampled_dataset) == 'y'] <- 'Groups'
sampled_dataset
ggplot(sampled_dataset, aes(x = sqft_living15, y = sqft_lot15, color = Groups)) +
geom_point() +
labs(title = "Segmentación Original de los Datos", x = "Var1", y = "Var2")
# Medias por grupo
group_means = aggregate(. ~ Groups, data = sampled_dataset, mean)
group_means
# Probabilidades a priori
priors = prop.table(table(sampled_dataset$Groups))
priors
lda_model <- lda(y ~ ., data = as.data.frame(X))
lda_model
valores_discriminantes <- predict(lda_model)$x
sampled_dataset$Discriminante <- valores_discriminantes[,1]  # Primer valor discriminante
ggplot(sampled_dataset, aes(x = Discriminante, fill = Groups)) +
geom_histogram(bins = 30, position = "dodge") +
labs(title = "Histograma de Valores Discriminantes por Grupo") +
theme_minimal()
predictions <- predict(lda_model)$class
sampled_dataset$Prediction <- predictions
# Visualización de la segmentación y predicciones
# Crear un data frame para la visualización
df_viz <- data.frame(
LD1 = predicted_values[,1],
LD2 = predicted_values[,2],
Group = sampled_dataset$Groups,
Prediction = sampled_dataset$Prediction
)
# Visualizar la segmentación y las predicciones
ggplot(df_viz, aes(x = LD1, y = LD2, color = Group, shape = Prediction)) +
geom_point(size = 3) +
labs(title = "Segmentación y Predicciones del Modelo LDA",
x = "Discriminante Lineal 1",
y = "Discriminante Lineal 2") +
theme_minimal()
# Evaluación del modelo
conf_matrix <- table(sampled_dataset$Groups, sampled_dataset$Prediction)
conf_matrix
accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix)
error_rate <- 1 - accuracy
accuracy
error_rate
# Calcular sensibilidad y especificidad para cada clase
sensibilidad <- function(conf_matrix, clase) {
TP <- conf_matrix[clase, clase]
FN <- sum(conf_matrix[clase, ]) - TP
TP / (TP + FN)
}
especificidad <- function(conf_matrix, clase) {
TN <- sum(conf_matrix) - sum(conf_matrix[, clase]) - sum(conf_matrix[clase, ]) + conf_matrix[clase, clase]
FP <- sum(conf_matrix[, clase]) - conf_matrix[clase, clase]
TN / (TN + FP)
}
# Aplicar las funciones a cada clase
clases <- rownames(conf_matrix)
sensibilidades <- sapply(clases, sensibilidad, conf_matrix = conf_matrix)
especificidades <- sapply(clases, especificidad, conf_matrix = conf_matrix)
sensibilidades
especificidades
mvn(X)
boxM(X, sampled_dataset$Groups)
nrow(X)
nrow(sampled_dataset$Groups)
mvn(X)
boxM(X, data.frame(Groups = sampled_dataset$Groups))
boxM(dataset)
mvn(sampled_dataset[names(X),])
mvn(sampled_dataset[names(X),])
names(X)
sampled_dataset[names(X),]
mvn(sampled_dataset[,names(X)])
boxM(sampled_dataset[,names(X)], sampled_dataset[,"Groups"])
table(sampled_dataset$Groups)
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(MASS)
library(ggplot2)
library(dplyr)
library(MVN)
library(heplots)
set.seed(420)
dataset = read.csv("../data/kc_house_data.csv")
summary(dataset)
head(dataset, 5)
#Remover observaciones con precio mayor a $1.5M
dataset = subset(dataset, price <= 1500000)
#Agregar una nueva variable categórica: Category
dataset$Category <- factor(ifelse(dataset$price < 500000, "low", ifelse(dataset$price < 1000000, "medium","high")))
all_cols <- names(dataset)
#Crear un data frame para la columna categoría
Category <- data.frame(dataset[,22])
#Se eliminan las primeras tres columnas (ID, Date, y Category)
temp = dataset[,-c(1:3,22)]
# Identificar variables con varianza cercana a cero: remove_cols
remove_cols <- nearZeroVar(temp)
# Remover variables con varianza cercana a cero
dataset = dataset[,-remove_cols]
#Agregar la variable categoría al data frame
dataset$Category <- Category[,1]
head(dataset,3)
sampled_index = sample(1:nrow(dataset), 300)
sampled_dataset = dataset[sampled_index,]
# head(sampled_dataset, 5)
y = sampled_dataset[,"Category"]
X = select_if(sampled_dataset, is.numeric)
X = X[,which(names(X) != "price")]
sampled_dataset = data.frame(cbind(X, y))
names(sampled_dataset)[names(sampled_dataset) == 'y'] <- 'Groups'
sampled_dataset
ggplot(sampled_dataset, aes(x = sqft_living15, y = sqft_lot15, color = Groups)) +
geom_point() +
labs(title = "Segmentación Original de los Datos", x = "Var1", y = "Var2")
# Medias por grupo
group_means = aggregate(. ~ Groups, data = sampled_dataset, mean)
group_means
# Probabilidades a priori
priors = prop.table(table(sampled_dataset$Groups))
priors
lda_model <- lda(y ~ ., data = as.data.frame(X))
lda_model
valores_discriminantes <- predict(lda_model)$x
sampled_dataset$Discriminante <- valores_discriminantes[,1]  # Primer valor discriminante
ggplot(sampled_dataset, aes(x = Discriminante, fill = Groups)) +
geom_histogram(bins = 30, position = "dodge") +
labs(title = "Histograma de Valores Discriminantes por Grupo") +
theme_minimal()
predictions <- predict(lda_model)$class
sampled_dataset$Prediction <- predictions
# Visualización de la segmentación y predicciones
# Crear un data frame para la visualización
df_viz <- data.frame(
LD1 = predicted_values[,1],
LD2 = predicted_values[,2],
Group = sampled_dataset$Groups,
Prediction = sampled_dataset$Prediction
)
# Visualizar la segmentación y las predicciones
ggplot(df_viz, aes(x = LD1, y = LD2, color = Group, shape = Prediction)) +
geom_point(size = 3) +
labs(title = "Segmentación y Predicciones del Modelo LDA",
x = "Discriminante Lineal 1",
y = "Discriminante Lineal 2") +
theme_minimal()
# Evaluación del modelo
conf_matrix <- table(sampled_dataset$Groups, sampled_dataset$Prediction)
conf_matrix
accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix)
error_rate <- 1 - accuracy
accuracy
error_rate
# Calcular sensibilidad y especificidad para cada clase
sensibilidad <- function(conf_matrix, clase) {
TP <- conf_matrix[clase, clase]
FN <- sum(conf_matrix[clase, ]) - TP
TP / (TP + FN)
}
especificidad <- function(conf_matrix, clase) {
TN <- sum(conf_matrix) - sum(conf_matrix[, clase]) - sum(conf_matrix[clase, ]) + conf_matrix[clase, clase]
FP <- sum(conf_matrix[, clase]) - conf_matrix[clase, clase]
TN / (TN + FP)
}
# Aplicar las funciones a cada clase
clases <- rownames(conf_matrix)
sensibilidades <- sapply(clases, sensibilidad, conf_matrix = conf_matrix)
especificidades <- sapply(clases, especificidad, conf_matrix = conf_matrix)
sensibilidades
especificidades
mvn(sampled_dataset[,names(X)])
boxM(sampled_dataset[,names(X)], sampled_dataset[,"Groups"])
table(sampled_dataset$Groups)
table(sampled_dataset$Groups)
mvn(sampled_dataset[,names(X)])
boxM(sampled_dataset[,names(X)], sampled_dataset[,"Groups"])
boxM(sampled_dataset[,names(X)], sampled_dataset[,"Groups"])
mvn(sampled_dataset[,names(X)])
mvn(sampled_dataset[,names(X)])
boxM(sampled_dataset[,names(X)], sampled_dataset[,"Groups"])
pairs(sampled_data[, names(X)], col=sampled_data$Group)
mvn(sampled_dataset[,names(X)])
boxM(sampled_dataset[,names(X)], sampled_dataset[,"Groups"])
pairs(sampled_dataset[, names(X)], col=sampled_data$Group)
mvn(sampled_dataset[,names(X)])
boxM(sampled_dataset[,names(X)], sampled_dataset[,"Groups"])
pairs(sampled_dataset[, names(X)], col=sampled_dataset$Groups)
mvn(sampled_dataset[,names(X)])
boxM(sampled_dataset[,names(X)], sampled_dataset[,"Groups"])
# pairs(sampled_dataset[, names(X)], col=sampled_dataset$Groups)
vif_model = lm(Groups ~ names(X), data = sampled_dataset)
mvn(sampled_dataset[,names(X)])
boxM(sampled_dataset[,names(X)], sampled_dataset[,"Groups"])
# pairs(sampled_dataset[, names(X)], col=sampled_dataset$Groups)
vif_model = lm(sampled_dataset$Groups ~ ., data = sampled_dataset[,names(X)])
vif(vif_model)
mvn(sampled_dataset[,names(X)])
boxM(sampled_dataset[,names(X)], sampled_dataset[,"Groups"])
# pairs(sampled_dataset[, names(X)], col=sampled_dataset$Groups)
vif_model = lm(Groups ~ ., data = sampled_dataset[,names(X)])
mvn(sampled_dataset[,names(X)])
boxM(sampled_dataset[,names(X)], sampled_dataset[,"Groups"])
# pairs(sampled_dataset[, names(X)], col=sampled_dataset$Groups)
vif_model = lm(Groups ~ ., data = sampled_dataset[,c(names(X), "Groups")])
vif(vif_model)
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(MASS)
library(ggplot2)
library(dplyr)
library(MVN)
library(heplots)
set.seed(420)
dataset = read.csv("../data/kc_house_data.csv")
summary(dataset)
head(dataset, 5)
#Remover observaciones con precio mayor a $1.5M
dataset = subset(dataset, price <= 1500000)
#Agregar una nueva variable categórica: Category
dataset$Category <- factor(ifelse(dataset$price < 500000, "low", ifelse(dataset$price < 1000000, "medium","high")))
all_cols <- names(dataset)
#Crear un data frame para la columna categoría
Category <- data.frame(dataset[,22])
#Se eliminan las primeras tres columnas (ID, Date, y Category)
temp = dataset[,-c(1:3,22)]
# Identificar variables con varianza cercana a cero: remove_cols
remove_cols <- nearZeroVar(temp)
# Remover variables con varianza cercana a cero
dataset = dataset[,-remove_cols]
#Agregar la variable categoría al data frame
dataset$Category <- Category[,1]
head(dataset,3)
sampled_index = sample(1:nrow(dataset), 300)
sampled_dataset = dataset[sampled_index,]
# head(sampled_dataset, 5)
y = sampled_dataset[,"Category"]
X = select_if(sampled_dataset, is.numeric)
X = X[,which(names(X) != "price")]
sampled_dataset = data.frame(cbind(X, y))
names(sampled_dataset)[names(sampled_dataset) == 'y'] <- 'Groups'
sampled_dataset
ggplot(sampled_dataset, aes(x = sqft_living15, y = sqft_lot15, color = Groups)) +
geom_point() +
labs(title = "Segmentación Original de los Datos", x = "Var1", y = "Var2")
# Medias por grupo
group_means = aggregate(. ~ Groups, data = sampled_dataset, mean)
group_means
# Probabilidades a priori
priors = prop.table(table(sampled_dataset$Groups))
priors
lda_model <- lda(y ~ ., data = as.data.frame(X))
lda_model
valores_discriminantes <- predict(lda_model)$x
sampled_dataset$Discriminante <- valores_discriminantes[,1]  # Primer valor discriminante
ggplot(sampled_dataset, aes(x = Discriminante, fill = Groups)) +
geom_histogram(bins = 30, position = "dodge") +
labs(title = "Histograma de Valores Discriminantes por Grupo") +
theme_minimal()
predictions <- predict(lda_model)$class
sampled_dataset$Prediction <- predictions
# Visualización de la segmentación y predicciones
# Crear un data frame para la visualización
df_viz <- data.frame(
LD1 = predicted_values[,1],
LD2 = predicted_values[,2],
Group = sampled_dataset$Groups,
Prediction = sampled_dataset$Prediction
)
# Visualizar la segmentación y las predicciones
ggplot(df_viz, aes(x = LD1, y = LD2, color = Group, shape = Prediction)) +
geom_point(size = 3) +
labs(title = "Segmentación y Predicciones del Modelo LDA",
x = "Discriminante Lineal 1",
y = "Discriminante Lineal 2") +
theme_minimal()
# Evaluación del modelo
conf_matrix <- table(sampled_dataset$Groups, sampled_dataset$Prediction)
conf_matrix
accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix)
error_rate <- 1 - accuracy
accuracy
error_rate
# Calcular sensibilidad y especificidad para cada clase
sensibilidad <- function(conf_matrix, clase) {
TP <- conf_matrix[clase, clase]
FN <- sum(conf_matrix[clase, ]) - TP
TP / (TP + FN)
}
especificidad <- function(conf_matrix, clase) {
TN <- sum(conf_matrix) - sum(conf_matrix[, clase]) - sum(conf_matrix[clase, ]) + conf_matrix[clase, clase]
FP <- sum(conf_matrix[, clase]) - conf_matrix[clase, clase]
TN / (TN + FP)
}
# Aplicar las funciones a cada clase
clases <- rownames(conf_matrix)
sensibilidades <- sapply(clases, sensibilidad, conf_matrix = conf_matrix)
especificidades <- sapply(clases, especificidad, conf_matrix = conf_matrix)
sensibilidades
especificidades
mvn(sampled_dataset[,names(X)])
boxM(sampled_dataset[,names(X)], sampled_dataset[,"Groups"])
# pairs(sampled_dataset[, names(X)], col=sampled_dataset$Groups)
vif_model = lm(sampled_dataset$Groups ~ ., data = sampled_dataset[,names(X)])
vif(vif_model)
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(MASS)
library(ggplot2)
library(dplyr)
library(MVN)
library(heplots)
library(car)
set.seed(420)
dataset = read.csv("../data/kc_house_data.csv")
summary(dataset)
head(dataset, 5)
#Remover observaciones con precio mayor a $1.5M
dataset = subset(dataset, price <= 1500000)
#Agregar una nueva variable categórica: Category
dataset$Category <- factor(ifelse(dataset$price < 500000, "low", ifelse(dataset$price < 1000000, "medium","high")))
all_cols <- names(dataset)
#Crear un data frame para la columna categoría
Category <- data.frame(dataset[,22])
#Se eliminan las primeras tres columnas (ID, Date, y Category)
temp = dataset[,-c(1:3,22)]
# Identificar variables con varianza cercana a cero: remove_cols
remove_cols <- nearZeroVar(temp)
# Remover variables con varianza cercana a cero
dataset = dataset[,-remove_cols]
#Agregar la variable categoría al data frame
dataset$Category <- Category[,1]
head(dataset,3)
sampled_index = sample(1:nrow(dataset), 300)
sampled_dataset = dataset[sampled_index,]
# head(sampled_dataset, 5)
y = sampled_dataset[,"Category"]
X = select_if(sampled_dataset, is.numeric)
X = X[,which(names(X) != "price")]
sampled_dataset = data.frame(cbind(X, y))
names(sampled_dataset)[names(sampled_dataset) == 'y'] <- 'Groups'
sampled_dataset
ggplot(sampled_dataset, aes(x = sqft_living15, y = sqft_lot15, color = Groups)) +
geom_point() +
labs(title = "Segmentación Original de los Datos", x = "Var1", y = "Var2")
# Medias por grupo
group_means = aggregate(. ~ Groups, data = sampled_dataset, mean)
group_means
# Probabilidades a priori
priors = prop.table(table(sampled_dataset$Groups))
priors
lda_model <- lda(y ~ ., data = as.data.frame(X))
lda_model
valores_discriminantes <- predict(lda_model)$x
sampled_dataset$Discriminante <- valores_discriminantes[,1]  # Primer valor discriminante
ggplot(sampled_dataset, aes(x = Discriminante, fill = Groups)) +
geom_histogram(bins = 30, position = "dodge") +
labs(title = "Histograma de Valores Discriminantes por Grupo") +
theme_minimal()
predictions <- predict(lda_model)$class
sampled_dataset$Prediction <- predictions
# Visualización de la segmentación y predicciones
# Crear un data frame para la visualización
df_viz <- data.frame(
LD1 = predicted_values[,1],
LD2 = predicted_values[,2],
Group = sampled_dataset$Groups,
Prediction = sampled_dataset$Prediction
)
predictions <- predict(lda_model)$class
sampled_dataset$Prediction <- predictions
# Visualización de la segmentación y predicciones
# Crear un data frame para la visualización
df_viz <- data.frame(
LD1 = predictions[,1],
LD2 = predictions[,2],
Group = sampled_dataset$Groups,
Prediction = sampled_dataset$Prediction
)
ggplot(sampled_dataset, aes(x = sqft_living15, y = sqft_basement, color = Groups)) +
geom_point() +
labs(title = "Segmentación Original de los Datos", x = "Var1", y = "Var2")
ggplot(sampled_dataset, aes(x = sqft_lot15, y = sqft_basement, color = Groups)) +
geom_point() +
labs(title = "Segmentación Original de los Datos", x = "Var1", y = "Var2")
ggplot(sampled_dataset, aes(x = grade, y = sqft_basement, color = Groups)) +
geom_point() +
labs(title = "Segmentación Original de los Datos", x = "Var1", y = "Var2")
ggplot(sampled_dataset, aes(x = sqft_living15, y = sqft_basement, color = Groups)) +
geom_point() +
labs(title = "Segmentación Original de los Datos", x = "Var1", y = "Var2")
ggplot(sampled_dataset, aes(x = view, y = sqft_basement, color = Groups)) +
geom_point() +
labs(title = "Segmentación Original de los Datos", x = "Var1", y = "Var2")
ggplot(sampled_dataset, aes(x = yr_built, y = sqft_basement, color = Groups)) +
geom_point() +
labs(title = "Segmentación Original de los Datos", x = "Var1", y = "Var2")
ggplot(sampled_dataset, aes(x = yr_built, y = sqft_living15, color = Groups)) +
geom_point() +
labs(title = "Segmentación Original de los Datos", x = "Var1", y = "Var2")
ggplot(sampled_dataset, aes(x = yr_built, y = sqft_lot15, color = Groups)) +
geom_point() +
labs(title = "Segmentación Original de los Datos", x = "Var1", y = "Var2")
ggplot(sampled_dataset, aes(x = yr_built, y = sqft_living15, color = Groups)) +
geom_point() +
labs(title = "Segmentación Original de los Datos", x = "Var1", y = "Var2")
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(MASS)
library(ggplot2)
library(dplyr)
library(MVN)
library(heplots)
library(car)
set.seed(420)
dataset = read.csv("../data/kc_house_data.csv")
summary(dataset)
head(dataset, 5)
#Remover observaciones con precio mayor a $1.5M
dataset = subset(dataset, price <= 1500000)
#Agregar una nueva variable categórica: Category
dataset$Category <- factor(ifelse(dataset$price < 500000, "low", ifelse(dataset$price < 1000000, "medium","high")))
all_cols <- names(dataset)
#Crear un data frame para la columna categoría
Category <- data.frame(dataset[,22])
#Se eliminan las primeras tres columnas (ID, Date, y Category)
temp = dataset[,-c(1:3,22)]
# Identificar variables con varianza cercana a cero: remove_cols
remove_cols <- nearZeroVar(temp)
# Remover variables con varianza cercana a cero
dataset = dataset[,-remove_cols]
#Agregar la variable categoría al data frame
dataset$Category <- Category[,1]
head(dataset,3)
sampled_index = sample(1:nrow(dataset), 300)
sampled_dataset = dataset[sampled_index,]
# head(sampled_dataset, 5)
y = sampled_dataset[,"Category"]
X = select_if(sampled_dataset, is.numeric)
X = X[,which(names(X) != "price")]
sampled_dataset = data.frame(cbind(X, y))
names(sampled_dataset)[names(sampled_dataset) == 'y'] <- 'Groups'
sampled_dataset
ggplot(sampled_dataset, aes(x = yr_built, y = sqft_living15, color = Groups)) +
geom_point() +
labs(title = "Segmentación Original de los Datos", x = "Var1", y = "Var2")
# Medias por grupo
group_means = aggregate(. ~ Groups, data = sampled_dataset, mean)
group_means
# Probabilidades a priori
priors = prop.table(table(sampled_dataset$Groups))
priors
lda_model <- lda(y ~ ., data = as.data.frame(X))
lda_model
valores_discriminantes <- predict(lda_model)$x
sampled_dataset$Discriminante <- valores_discriminantes[,1]  # Primer valor discriminante
ggplot(sampled_dataset, aes(x = Discriminante, fill = Groups)) +
geom_histogram(bins = 30, position = "dodge") +
labs(title = "Histograma de Valores Discriminantes por Grupo") +
theme_minimal()
predicted_values <- predict(lda_model)$x
sampled_dataset$LDA1 <- predicted_values[,1]
ggplot(sampled_dataset, aes(x = LDA1, fill = Groups)) +
geom_histogram(binwidth = 0.5, alpha = 0.7, position = "identity") +
labs(title = "Histograma de Valores Discriminantes", x = "LDA1", y = "Frecuencia")
predictions <- predict(lda_model)$class
sampled_dataset$Prediction <- predictions
# Visualización de la segmentación y predicciones
# Crear un data frame para la visualización
df_viz <- data.frame(
LD1 = predicted_values[,1],
LD2 = predicted_values[,2],
Group = sampled_dataset$Groups,
Prediction = sampled_dataset$Prediction
)
# Visualizar la segmentación y las predicciones
ggplot(df_viz, aes(x = LD1, y = LD2, color = Group, shape = Prediction)) +
geom_point(size = 3) +
labs(title = "Segmentación y Predicciones del Modelo LDA",
x = "Discriminante Lineal 1",
y = "Discriminante Lineal 2") +
theme_minimal()
# Evaluación del modelo
conf_matrix <- table(sampled_dataset$Groups, sampled_dataset$Prediction)
conf_matrix
accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix)
error_rate <- 1 - accuracy
accuracy
error_rate
# Calcular sensibilidad y especificidad para cada clase
sensibilidad <- function(conf_matrix, clase) {
TP <- conf_matrix[clase, clase]
FN <- sum(conf_matrix[clase, ]) - TP
TP / (TP + FN)
}
especificidad <- function(conf_matrix, clase) {
TN <- sum(conf_matrix) - sum(conf_matrix[, clase]) - sum(conf_matrix[clase, ]) + conf_matrix[clase, clase]
FP <- sum(conf_matrix[, clase]) - conf_matrix[clase, clase]
TN / (TN + FP)
}
# Aplicar las funciones a cada clase
clases <- rownames(conf_matrix)
sensibilidades <- sapply(clases, sensibilidad, conf_matrix = conf_matrix)
especificidades <- sapply(clases, especificidad, conf_matrix = conf_matrix)
sensibilidades
especificidades
mvn(sampled_dataset[,names(X)])
boxM(sampled_dataset[,names(X)], sampled_dataset[,"Groups"])
# pairs(sampled_dataset[, names(X)], col=sampled_dataset$Groups)
vif_model = lm(sampled_dataset$Groups ~ ., data = sampled_dataset[,names(X)])
vif(vif_model)
